// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/minhsang/Desktop/API_GoLang/usecases/interface_usecase.go

// Package mock_usecases is a generated GoMock package.
package mocks

import (
	model "app/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStudentUsecase is a mock of StudentUsecase interface.
type MockStudentUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockStudentUsecaseMockRecorder
}

// MockStudentUsecaseMockRecorder is the mock recorder for MockStudentUsecase.
type MockStudentUsecaseMockRecorder struct {
	mock *MockStudentUsecase
}

// NewMockStudentUsecase creates a new mock instance.
func NewMockStudentUsecase(ctrl *gomock.Controller) *MockStudentUsecase {
	mock := &MockStudentUsecase{ctrl: ctrl}
	mock.recorder = &MockStudentUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentUsecase) EXPECT() *MockStudentUsecaseMockRecorder {
	return m.recorder
}

// DeleteOne mocks base method.
func (m *MockStudentUsecase) DeleteOne(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockStudentUsecaseMockRecorder) DeleteOne(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockStudentUsecase)(nil).DeleteOne), ctx, id)
}

// GetAll mocks base method.
func (m *MockStudentUsecase) GetAll(ctx context.Context) ([]model.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStudentUsecaseMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStudentUsecase)(nil).GetAll), ctx)
}

// GetOneByID mocks base method.
func (m *MockStudentUsecase) GetOneByID(ctx context.Context, id int) (model.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByID", ctx, id)
	ret0, _ := ret[0].(model.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByID indicates an expected call of GetOneByID.
func (mr *MockStudentUsecaseMockRecorder) GetOneByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByID", reflect.TypeOf((*MockStudentUsecase)(nil).GetOneByID), ctx, id)
}

// InsertOne mocks base method.
func (m *MockStudentUsecase) InsertOne(ctx context.Context, c *model.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockStudentUsecaseMockRecorder) InsertOne(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockStudentUsecase)(nil).InsertOne), ctx, c)
}

// Search mocks base method.
func (m *MockStudentUsecase) Search(ctx context.Context, Value string) ([]model.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, Value)
	ret0, _ := ret[0].([]model.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockStudentUsecaseMockRecorder) Search(ctx, Value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockStudentUsecase)(nil).Search), ctx, Value)
}

// UpdateOne mocks base method.
func (m *MockStudentUsecase) UpdateOne(ctx context.Context, id int, student *model.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", ctx, id, student)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockStudentUsecaseMockRecorder) UpdateOne(ctx, id, student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockStudentUsecase)(nil).UpdateOne), ctx, id, student)
}
